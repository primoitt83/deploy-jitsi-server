---
- name: "Configurar interface ALSA Loopback: {{INSTALAR_SERVICO_JIBRI}}"
  lineinfile:
    dest: /etc/modprobe.d/alsa-loopback.conf
    state: "present"
    regexp: "^options snd-aloop enable=1,1,1,1,1 index=0,1,2,3,4"
    line: "options snd-aloop enable=1,1,1,1,1 index=0,1,2,3,4"
    create: yes
  when: INSTALAR_SERVICO_JIBRI

- name: Definir limite de arquivos e processos abertos (/etc/systemd/system.conf)
  lineinfile:
    path: /etc/systemd/system.conf
    regexp: "^{{item.parametro}}=.*"
    line: "{{item.parametro}}={{item.valor}}"
    backup: yes
  with_items:
    - { parametro: DefaultLimitNOFILE, valor: 65000 }
    - { parametro: DefaultLimitNPROC, valor: 65000 }
    - { parametro: DefaultTasksMax, valor: 65000 }
  register: recarrecar_systemctl_daemon

- name: "Recarregar daemon systemctl: {{recarrecar_systemctl_daemon.changed}}"
  shell: systemctl daemon-reload
  when: recarrecar_systemctl_daemon.changed

- name: "Carregar módulo kernel do snd-aloop: {{INSTALAR_SERVICO_JIBRI}}"
  modprobe:
    name: snd-aloop
    state: present
  when: INSTALAR_SERVICO_JIBRI

- name: Criar pasta de instalação e config
  file:
    path: "{{ INSTALACAO_PASTA }}"
    state: directory
    recurse: yes

- name: Copiar assets gráficos do serpro
  copy:
    src:  files/imagens
    dest: "{{ INSTALACAO_PASTA_WEB }}/"
  tags: assets_graficos
  when: INSTALAR_SERVICO_WEB | bool

- name: Copiar compose file
  template:
    src: opt/jitsi/{{item}}
    dest: "{{ INSTALACAO_PASTA }}/{{item}}"
  with_items:
    - docker-compose.yml
  tags: compose
  register: compose_file_status

- debug:
    msg:
      - Status do arquivo compose - {{compose_file_status.changed}}

- name: "Copiar arquivos do jibri: {{INSTALAR_SERVICO_JIBRI}}"
  template:
    src: opt/jitsi/jibri/{{item}}
    dest: "{{ INSTALACAO_PASTA_JIBRI }}/{{item}}"
  with_items:
    - ffmpeg-serpro
  when: INSTALAR_SERVICO_JIBRI | bool

- name: Copiar configuracao customizada do jitsi
  template:
    src: opt/jitsi/web/{{item}}
    dest: "{{ INSTALACAO_PASTA_WEB }}"
  with_items:
    - custom-config.js
    - interface_config.js
  register: reiniciar_stack

- name: "Novo compose file ({{ INSTALACAO_PASTA }}/): {{compose_file_status.changed}}. Aplicando alterações"
  shell: |
    docker-compose stop
    docker-compose rm -f
    docker-compose up -d
  args:
    chdir: "{{ INSTALACAO_PASTA }}/"
  when: compose_file_status.changed

- name: "Aguardar carga do serviço web"
  wait_for:
    path: "{{INSTALACAO_PASTA_WEB}}/nginx/site-confs/default"

- name: Configurar uso de IPv6 no serviço Web na porta 80
  lineinfile:
    path: "{{INSTALACAO_PASTA_WEB}}/nginx/site-confs/default"
    regexp: listen \[::\]:80 default_server
    line: '#  listen [::]:80 default_server;'
  when: desabilitar_suporte_ipv6
  register: nginx_config_arquivo

- name: Configurar uso de IPv6 no serviço Web na porta 443
  lineinfile:
    path: "{{INSTALACAO_PASTA_WEB}}/nginx/site-confs/default"
    regexp: listen \[::\]:443 ssl http2
    line: '#  listen [::]:443 ssl http2;'
    # state: absent
  when: desabilitar_suporte_ipv6
  register: nginx_config_arquivo

- name: Copiar arquivo customizado para websockets nos Jvbs
  shell: |
    cp templates/opt/jitsi/web/meet.conf /opt/jitsi/web/nginx
    chattr +i /opt/jitsi/web/nginx/meet.conf        

- name: Aplicando alterações de configuração  IPv6
  shell: |
    docker exec -it {{CONTAINER_NOME_WEB}} /etc/init.d/nginx restart
  args:
    chdir: "{{ INSTALACAO_PASTA }}/"
  when: nginx_config_arquivo.changed
  ignore_errors: yes

- name: Executar script chama.sh no container WEB
  shell: | 
    docker exec -it {{CONTAINER_NOME_WEB}} chmod +x /usr/share/jitsi-meet/images/chama.sh
    docker exec -it {{CONTAINER_NOME_WEB}} sh /usr/share/jitsi-meet/images/chama.sh